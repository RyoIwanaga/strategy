!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Archer	Unit.h	/^		Archer,$/;"	m	class:Unit::Type
BOX_DEFAULT_CH_H	console/Window.h	/^	static const char BOX_DEFAULT_CH_H = '-';$/;"	m	class:Window
BOX_DEFAULT_CH_V	console/Window.h	/^	static const char BOX_DEFAULT_CH_V = '|';$/;"	m	class:Window
BaseType	Terrain.h	/^	enum class BaseType {$/;"	c	class:Terrain
CFLAGS	Makefile	/^CFLAGS=-Wall -O$/;"	m
CFLAGS	test/Makefile	/^CFLAGS=-Wall -O$/;"	m
CFLAGS	utest/Makefile	/^CFLAGS=-Wall -O$/;"	m
CH_BLANK	console/Window.h	/^	static const char CH_BLANK = ' ';$/;"	m	class:Window
CLANGXX	Makefile	/^CLANGXX=clang++$/;"	m
CPP11	Makefile	/^CPP11=-std=c++11$/;"	m
CPP11	test/Makefile	/^CPP11=-std=c++11$/;"	m
CPP11	utest/Makefile	/^CPP11=-std=c++11$/;"	m
CURSES	Makefile	/^CURSES=-lncurses$/;"	m
CURSES	utest/Makefile	/^CURSES=-lncurses$/;"	m
City	City.h	/^	City(std::string name, Owner owner, PosHex pos) :$/;"	f	class:City
City	City.h	/^class City$/;"	c
Coast	Terrain.h	/^		Coast,$/;"	m	class:Terrain::BaseType
Color	console/console.h	/^enum class Color : short {$/;"	c
Desert	Terrain.h	/^		Desert,		\/\/ 0 0 0 $/;"	m	class:Terrain::BaseType
FeatureType	Terrain.h	/^	enum class FeatureType {$/;"	c	class:Terrain
Flatland	Terrain.h	/^		Flatland,$/;"	m	class:Terrain::VerticalType
FloodPlain	Terrain.h	/^		FloodPlain,	\/\/ 3 0 1$/;"	m	class:Terrain::FeatureType
Forest	Terrain.h	/^		Forest,		\/\/ 0 +1 0$/;"	m	class:Terrain::FeatureType
Glassland	Terrain.h	/^		Glassland, 	\/\/ 2 0 0$/;"	m	class:Terrain::BaseType
HEX_HEIGHT	console/WindowWorld.h	/^	static const int HEX_HEIGHT = 2;$/;"	m	class:WindowWorld
HEX_SPACE	console/WindowWorld.h	/^	static const int HEX_SPACE = 2;$/;"	m	class:WindowWorld
HEX_WIDTH	console/WindowWorld.h	/^	static const int HEX_WIDTH = 2;$/;"	m	class:WindowWorld
HexTest	utest/main.cpp	/^CPPUNIT_TEST_SUITE_REGISTRATION(HexTest);$/;"	v
HexTest	utest/main.cpp	/^class HexTest : public CPPUNIT_NS::TestFixture$/;"	c	file:
Hill	Terrain.h	/^		Hill,$/;"	m	class:Terrain::VerticalType
Ice	Terrain.h	/^		Ice,		\/\/ 0 0 0$/;"	m	class:Terrain::BaseType
Jungle	Terrain.h	/^		Jungle,		\/\/ -1 0 0$/;"	m	class:Terrain::FeatureType
LCPPUNIT	utest/Makefile	/^LCPPUNIT=-lcppunit$/;"	m
Lake	Terrain.h	/^		Lake,$/;"	m	class:Terrain::BaseType
Math	Util.h	/^	namespace Math {$/;"	n	namespace:Util
NS_CONSOLE	console/console.h	8;"	d
NS_CONSOLE_END	console/console.h	9;"	d
NS_REU	reu.h	31;"	d
NS_REU_END	reu.h	32;"	d
NS_STRATEGY	strategy.h	21;"	d
NS_STRATEGY_END	strategy.h	22;"	d
NS_USING_STRATEGY	strategy.h	23;"	d
None	Terrain.h	/^		None,$/;"	m	class:Terrain::BaseType
None	Terrain.h	/^		None,$/;"	m	class:Terrain::FeatureType
OBJS	Makefile	/^OBJS=main.cpp Unit.cpp$/;"	m
OBJS	test/Makefile	/^OBJS=$/;"	m
OBJS	utest/Makefile	/^OBJS=$/;"	m
Oasis	Terrain.h	/^		Oasis,		\/\/ 3 0 2$/;"	m	class:Terrain::FeatureType
Ocean	Terrain.h	/^		Ocean,$/;"	m	class:Terrain::BaseType
Owner	strategy.h	/^typedef unsigned short 	Owner;$/;"	t
Peak	Terrain.h	/^		Peak,$/;"	m	class:Terrain::VerticalType
Plains	Terrain.h	/^		Plains,		\/\/ 1 1 0$/;"	m	class:Terrain::BaseType
Player1	console/console.h	/^	Player1 = 10,$/;"	m	class:Color
Player2	console/console.h	/^	Player2,$/;"	m	class:Color
Player3	console/console.h	/^	Player3,$/;"	m	class:Color
Player4	console/console.h	/^	Player4,$/;"	m	class:Color
Player5	console/console.h	/^	Player5,$/;"	m	class:Color
Player6	console/console.h	/^	Player6,$/;"	m	class:Color
Player7	console/console.h	/^	Player7,$/;"	m	class:Color
Player8	console/console.h	/^	Player8,$/;"	m	class:Color
PlayerInfo	PlayerInfo.h	/^class PlayerInfo$/;"	c
PosHex	strategy.h	/^typedef unsigned long 	PosHex;$/;"	t
Ptr	Unit.h	/^	typedef std::shared_ptr<Unit> Ptr;$/;"	t	class:Unit
Ptr	World.h	/^	typedef std::shared_ptr<World> Ptr;$/;"	t	class:World
Ptr	console/Window.h	/^	typedef std::shared_ptr<Window> Ptr;$/;"	t	class:Window
Ptr	console/WindowMessage.h	/^	typedef std::shared_ptr<WindowMessage> Ptr;$/;"	t	class:WindowMessage
Ptr	console/WindowWorld.h	/^	typedef std::shared_ptr<WindowWorld> Ptr;$/;"	t	class:WindowWorld
REU__PROPERTY	reu.h	5;"	d
REU__PROPERTY_PRIVATE	reu.h	14;"	d
REU__PROPERTY_READONLY	reu.h	10;"	d
Scout	Unit.h	/^		Scout,$/;"	m	class:Unit::Type
Settler	Unit.h	/^		Settler = 0,$/;"	m	class:Unit::Type
Terrain	Terrain.h	/^	Terrain () :$/;"	f	class:Terrain
Terrain	Terrain.h	/^	Terrain (BaseType base, VerticalType vertical, FeatureType feature) :$/;"	f	class:Terrain
Terrain	Terrain.h	/^class Terrain $/;"	c
TerrainGlassland	console/console.h	/^	TerrainGlassland,$/;"	m	class:Color
TerrainOcean	console/console.h	/^	TerrainOcean,$/;"	m	class:Color
TerrainOutOfSight	console/console.h	/^	TerrainOutOfSight = 1,$/;"	m	class:Color
Tundra	Terrain.h	/^		Tundra,		\/\/ 1 0 0$/;"	m	class:Terrain::BaseType
Type	Unit.h	/^	enum class Type {$/;"	c	class:Unit
Unit	Unit.cpp	/^Unit::Unit(Unit::Type t, Owner owner, ulong pos, int hp, int damage, ushort move, ushort sight) :$/;"	f	class:Unit
Unit	Unit.h	/^class Unit$/;"	c
Util	Util.h	/^namespace Util {$/;"	n
UtilTest	utest/main.cpp	/^CPPUNIT_TEST_SUITE_REGISTRATION(UtilTest);$/;"	v
UtilTest	utest/main.cpp	/^class UtilTest : public CPPUNIT_NS::TestFixture$/;"	c	file:
Vec2	console/Window.h	/^typedef reu::diagram::Vec2<int> Vec2;$/;"	t
Vec2	reu.h	/^		Vec2<T>::Vec2(T x, T y) :$/;"	f	class:diagram::Vec2
Vec2	reu.h	/^		class Vec2$/;"	c	namespace:diagram
VerticalType	Terrain.h	/^	enum class VerticalType {$/;"	c	class:Terrain
Warrior	Unit.h	/^		Warrior,$/;"	m	class:Unit::Type
Window	console/Window.h	/^Window::Window(console::Vec2 size, console::Vec2 pos, bool isBox) : \/\/ = false$/;"	f	class:Window
Window	console/Window.h	/^class Window$/;"	c
WindowMessage	console/WindowMessage.h	/^WindowMessage::WindowMessage(console::Vec2 size, console::Vec2 pos) :$/;"	f	class:WindowMessage
WindowMessage	console/WindowMessage.h	/^class WindowMessage : public Window$/;"	c
WindowWorld	console/WindowWorld.h	/^WindowWorld::WindowWorld($/;"	f	class:WindowWorld
WindowWorld	console/WindowWorld.h	/^class WindowWorld : public Window$/;"	c
World	World.h	/^	World (int height, int width, bool isCylinder) :$/;"	f	class:World
World	World.h	/^class World$/;"	c
WorldInfo	WorldInfo.h	/^class WorldInfo$/;"	c
_Console__Window_h_	console/Window.h	2;"	d
_Util_h_	Util.h	2;"	d
_makeColorTerrain	console/console.h	/^short _makeColorTerrain(const Terrain& t)$/;"	f
_reu_h_	reu.h	2;"	d
_strategy__City_h_	City.h	2;"	d
_strategy__PlayerInfo_h_	PlayerInfo.h	2;"	d
_strategy__Terrain_h_	Terrain.h	2;"	d
_strategy__Unit_h_	Unit.h	2;"	d
_strategy__WorldInfo_h_	WorldInfo.h	2;"	d
_strategy__World_h_	World.h	2;"	d
_strategy__console__WindowMessage_h_	console/WindowMessage.h	2;"	d
_strategy__console__WindowWorld_h_	console/WindowWorld.h	2;"	d
_strategy__console_h_	console/console.h	2;"	d
_strategy__hex_h_	hex.h	2;"	d
_strategy__strategy_h_	strategy.h	2;"	d
addCh	console/Window.h	/^int Window::addCh(console::chtype ch)$/;"	f	class:Window
addCircle	Util.h	/^		inline int addCircle(int base, int add, int max, int min = 0) $/;"	f	namespace:Util::Math
addCircle	utest/main.cpp	/^	void addCircle()$/;"	f	class:UtilTest
addStr	console/Window.h	/^int Window::addStr(char* str)$/;"	f	class:Window
addToMax	Util.h	/^			inline T addToMax(T base, T value, T max)$/;"	f	namespace:Util::Math
box	console/Window.h	/^int Window::box()$/;"	f	class:Window
clear	console/Window.h	/^int Window::clear()$/;"	f	class:Window
collectRange	hex.h	/^	bool collectRange(std::set<PosHex>* acc, PosHex index, ushort n, int height, int width, bool isCyinder)$/;"	f	namespace:hex
create	Unit.cpp	/^Unit::Ptr Unit::create(Type t, Owner owner, ulong p)$/;"	f	class:Unit
create	console/Window.h	/^Window::Ptr Window::create(console::Vec2 size, console::Vec2 pos, bool isBox) \/\/ = false$/;"	f	class:Window
create	console/WindowMessage.h	/^WindowMessage::Ptr WindowMessage::create(console::Vec2 size, console::Vec2 pos)$/;"	f	class:WindowMessage
create	console/WindowWorld.h	/^WindowWorld::Ptr WindowWorld::create($/;"	f	class:WindowWorld
createMassive	World.h	/^World::Ptr World::createMassive(int height, int width, bool isCylinder, float landPersentage)$/;"	f	class:World
createRange	hex.h	/^	createRange(PosHex index, ushort n, int height, int width, bool isCyinder)$/;"	f	namespace:hex
createVisibleTerrains	WorldInfo.h	/^std::shared_ptr<std::set<PosHex>> WorldInfo::createVisibleTerrains(ushort player)$/;"	f	class:WorldInfo
diagram	reu.h	/^namespace diagram {$/;"	n
display	console/WindowMessage.h	/^void WindowMessage::display()$/;"	f	class:WindowMessage
display	console/WindowWorld.h	/^void WindowWorld::display(const strategy::WorldInfo& worldInfo)$/;"	f	class:WindowWorld
finalize	console/console.h	/^void finalize ()$/;"	f
find	reu.h	/^typename std::list<T>::iterator find(std::list<T> lst, const T& item)$/;"	f	namespace:list
format	console/Window.h	/^int Window::format(char* str, const Args& ... args)$/;"	f	class:Window
getCursolPos	console/WindowWorld.h	/^strategy::PosHex WindowWorld::getCursolPos()$/;"	f	class:WindowWorld
getCursolX	console/WindowWorld.h	/^	int getCursolX() { return this->getCursol().getX(); }$/;"	f	class:WindowWorld
getCursolY	console/WindowWorld.h	/^	int getCursolY() { return this->getCursol().getY(); }$/;"	f	class:WindowWorld
getHeight	World.h	/^	int getHeight() const { return height; }$/;"	f	class:World
getHexGridHeight	console/WindowWorld.h	/^int WindowWorld::getHexGridHeight()$/;"	f	class:WindowWorld
getHexGridWidth	console/WindowWorld.h	/^int WindowWorld::getHexGridWidth()$/;"	f	class:WindowWorld
getWidth	World.h	/^	int getWidth() { return width; }$/;"	f	class:World
getWindowSize	console/Window.h	/^console::Vec2 Window::getWindowSize()$/;"	f	class:Window
height	World.h	/^	int height;$/;"	m	class:World
hex	hex.h	/^namespace hex {$/;"	n
initColorTerrain	console/console.h	/^void initColorTerrain()$/;"	f
initialize	console/console.h	/^void initialize()$/;"	f
isCylinder	World.h	/^	bool isCylinder;$/;"	m	class:World
isMovable	Unit.cpp	/^bool Unit::isMovable()$/;"	f	class:Unit
list	reu.h	/^namespace list {$/;"	n
listToSet	utest/main.cpp	/^	std::set<int> listToSet(const std::list<int>& lst)$/;"	f	class:HexTest
main	main.cpp	/^int main () $/;"	f
main	test/HexTest.cpp	/^int main(void)$/;"	f
main	utest/main.cpp	/^int main(int argc, char const *argv[]){$/;"	f
makeChTerrain	console/WindowWorld.h	/^char makeChTerrain(const Terrain& terrain)$/;"	f
makeChUnit	console/WindowWorld.h	/^char makeChUnit(strategy::Unit::Ptr unit)$/;"	f
makeColorPlayer	console/console.h	/^chtype makeColorPlayer(ushort player)$/;"	f
makeColorTerrain	console/console.h	/^chtype makeColorTerrain(const Terrain& t)$/;"	f
makeColorTerrainOutOfSight	console/console.h	/^chtype makeColorTerrainOutOfSight()$/;"	f
move	console/Window.h	/^int Window::move(const Vec2& pos)$/;"	f	class:Window
moveAddCh	console/Window.h	/^int Window::moveAddCh(const console::Vec2& pos, console::chtype ch)$/;"	f	class:Window
moveAddStr	console/Window.h	/^	int moveAddStr(int row, char* str) $/;"	f	class:Window
moveAddStr	console/Window.h	/^int Window::moveAddStr(const console::Vec2& pos, char* str)$/;"	f	class:Window
moveFormat	console/Window.h	/^	int moveFormat(int row, char* str, const Args& ... args)$/;"	f	class:Window
moveFormat	console/Window.h	/^int Window::moveFormat(const console::Vec2& pos,char* str, const Args& ... args)$/;"	f	class:Window
moveLeft	console/WindowWorld.h	/^void WindowWorld::moveLeft() $/;"	f	class:WindowWorld
moveLeftDown	console/WindowWorld.h	/^void WindowWorld::moveLeftDown()$/;"	f	class:WindowWorld
moveLeftUp	console/WindowWorld.h	/^void WindowWorld::moveLeftUp()$/;"	f	class:WindowWorld
moveRight	console/WindowWorld.h	/^void WindowWorld::moveRight() $/;"	f	class:WindowWorld
moveRightDown	console/WindowWorld.h	/^void WindowWorld::moveRightDown()$/;"	f	class:WindowWorld
moveRightUp	console/WindowWorld.h	/^void WindowWorld::moveRightUp()$/;"	f	class:WindowWorld
neighbor	utest/main.cpp	/^	void neighbor()$/;"	f	class:HexTest
neighbors	hex.h	/^	std::list<PosHex> neighbors(PosHex index, int height, int width, bool isCyinder)$/;"	f	namespace:hex
posToWindowPos	console/Window.h	/^Vec2 Window::posToWindowPos(const Vec2& pos)$/;"	f	class:Window
printHex	test/HexTest.cpp	/^void printHex(int index, const std::list<int>& lst)$/;"	f
refresh	console/Window.h	/^int Window::refresh()$/;"	f	class:Window
setCursolX	console/WindowWorld.h	/^	void setCursolX(int x) $/;"	f	class:WindowWorld
setCursolY	console/WindowWorld.h	/^	void setCursolY(int y) $/;"	f	class:WindowWorld
setUp	utest/main.cpp	/^	void setUp()$/;"	f	class:HexTest
setUp	utest/main.cpp	/^	void setUp()$/;"	f	class:UtilTest
sint	reu.h	/^typedef int 			sint;$/;"	t
slong	reu.h	/^typedef long 			slong;$/;"	t
sshort	reu.h	/^typedef short			sshort;$/;"	t
subToMin	Util.h	/^			inline T subToMin(T base, T value, T min)$/;"	f	namespace:Util::Math
terrains	World.h	/^	std::vector<Terrain> terrains;$/;"	m	class:World
testDown	utest/main.cpp	/^	void testDown()$/;"	f	class:HexTest
testDown	utest/main.cpp	/^	void testDown()$/;"	f	class:UtilTest
uint	reu.h	/^typedef unsigned int 	uint;$/;"	t
ulong	reu.h	/^typedef unsigned long 	ulong;$/;"	t
updateVisibleTerrains	WorldInfo.h	/^bool WorldInfo::updateVisibleTerrains(ushort player)$/;"	f	class:WorldInfo
ushort	reu.h	/^typedef unsigned short	ushort;$/;"	t
width	World.h	/^	int width;$/;"	m	class:World
~City	City.h	/^	virtual ~City() {}$/;"	f	class:City
~Unit	Unit.cpp	/^Unit::~Unit()$/;"	f	class:Unit
~Vec2	reu.h	/^			virtual ~Vec2() {}$/;"	f	class:diagram::Vec2
~Window	console/Window.h	/^Window::~Window()$/;"	f	class:Window
~WindowMessage	console/WindowMessage.h	/^WindowMessage::~WindowMessage() {}$/;"	f	class:WindowMessage
~WindowWorld	console/WindowWorld.h	/^	virtual ~WindowWorld() {}$/;"	f	class:WindowWorld
